using System;
using System.Collections.Generic;
using System.Linq;

namespace ConsoleApp3
{
    class Program
    {

		public static int  tt(int[] stocks)
		{
			int profit = 0;
			int maxProfit = 0;

			if (stocks == null || stocks.Length <= 1)
				return profit;

			int bp = stocks[0];
			int sp = -1; // price will not be negative

			for (int i = 1; i < stocks.Length; i++)
			{
				// first pick the BP
				if (stocks[i] <= bp)
				{
					bp = stocks[i];
					//reset the SP
					sp = 0;
				}
				// pick the SP, pick the new SP even though it is the duplicate SP for situations line [2,1,2,1 0,1,2]
				else if (stocks[i] >= sp)
				{
					sp = stocks[i];
					//calculate profit only after getting the sp to avoid situations like [2,4,1]
					profit = sp - bp;
					maxProfit = Math.Max(profit, maxProfit);
				}
			}

			return maxProfit;
		}

        static void Main(string[] args)
        {
			List<string> Words = new List<string>();
			Words.Add("bella");
			Words.Add("label");
			Words.Add("roller");
			Console.WriteLine(tt(new int[] { 1, 7, 5, 7, 8, 1, 3 }));
			//Dictionary<string, int> cnt = new Dictionary<string, int>();
			//List<char> s = new List<char>();

			//for (int i = 0; i < Words.Count; i++)
			//{
			//	if (i == 1)
			//	{
			//		var t1 = Words[0].ToCharArray();
			//		var t2 = Words[i].ToCharArray();
			//		s.AddRange(Words[0].ToCharArray().Where(x => Words[i].ToCharArray().Contains(x)));
			//	}
			//	else if(i>1)
			//	{
			//		s=s.Intersect(Words[i].ToCharArray()).ToList();
			//	}
			//}

			//s.ForEach(x =>
			//{
			//	Console.WriteLine(x);
			//});
		}
    }
}
